name: Frontend CI

on: 
    push:
        paths: 
            - frontend/**
        branches: 
            - main
    pull_request:
        paths:
            - frontend/**
        branches:
            - main
    workflow_dispatch:

jobs:
    code-validation:
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: frontend/
        steps:
            - name: Checkout Code
              uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

            - name: Setup Node
              uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020
              with:
                node-version: 22.x
                cache: 'npm'

            - name: Install dependencies 
              run: npm install

            - name: Secret Scanning
              uses: trufflesecurity/trufflehog@0f58ae7c5036094a1e3e750d18772af92821b503
              with:
                extra_args: --results=verified,unknown

            - name: SonarQube Scan
              uses: SonarSource/sonarqube-scan-action@1a6d90ebcb0e6a6b1d87e37ba693fe453195ae25
              env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

            - name: SonarQube Quality Gate check
              id: sonarqube-quality-gate-check
              uses: sonarsource/sonarqube-quality-gate-action@cf038b0e0cdecfa9e56c198bbb7d21d751d62c3b
              with:
                pollingTimeoutSec: 600
              env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

            - name: Build project & confirm build 
              run: |
                echo "Building project...."
                npm run build
                echo "confirming build output...."
                if [ ! -d "dist" ]; then
                echo "Build output directory 'dist' not found!"
                exit 1
                fi
                echo "Build successful - output directory exists"
                ls -la dist/

    build-and-push: 
        runs-on: ubuntu-latest
        needs: code-validation
        defaults:
              run:
                  working-directory: frontend/
        steps: 
          - name: Checkout Code
            uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8

          - name: Configure AWS Credentials
            uses: aws-actions/configure-aws-credentials@a03048d87541d1d9fcf2ecf528a4a65ba9bd7838 # v4
            with:
              aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
              aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
              aws-region: ${{ vars.REGION }}

          - name: Login to Amazon ECR
            id: login-ecr
            uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 #v2.0.1

          - name: Set image variables
            id: vars
            run: |
              echo "REGISTRY=${{ steps.login-ecr.outputs.registry }}" >> $GITHUB_ENV
              echo "REPOSITORY=frontend-service" >> $GITHUB_ENV
              echo "IMAGE_TAG=${{ github.sha }}" >> $GITHUB_ENV

          - name: Build docker image
            env:
              API: ${{ secrets.BACKEND_API_URL }}
            run: |
              docker build --build-arg REACT_APP_API_URL=$API -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .

          - name: Run Trivy vulnerability scanner
            uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8 #v0.33.1
            with:
              image-ref: ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
              format: table
              severity: CRITICAL
              exit-code: '1'   # fail pipeline if high/critical issues found

          - name: Push docker image to Amazon ECR
            if: success()   ## only push if Trivy passes
            run: |
              docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG