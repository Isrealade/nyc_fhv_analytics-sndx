# Default values for frontend.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 3

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: 501818865030.dkr.ecr.us-east-1.amazonaws.com/frontend-service
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: 3ec715ac352545824a7b78b2628caa21a0cb1f09

# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

config:
  backendUrl: http://backend.default.svc.cluster.local:4000

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
podLabels:
  app: frontend
  role: frontend

podSecurityContext: 
  fsGroup: 2000

securityContext: 
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
service:
  type: ClusterIP
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "nginx"
  annotations: 
        # Tell Kubernetes to use the AWS ALB Ingress Controller
    kubernetes.io/ingress.class: alb

    # Attach your ACM certificate
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-east-1:501818865030:certificate/edd157c8-0ebe-4aa0-8759-42ef1ed57952

    # Make the ALB internet-facing
    alb.ingress.kubernetes.io/scheme: internet-facing

    # Redirect HTTP traffic to HTTPS automatically
    alb.ingress.kubernetes.io/ssl-redirect: '443'

    # Make ALB listen only on HTTPS 443
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
  hosts:
    - host: css.redeploy.online
      paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: frontend
              port:
                number: 8080
        - path: /drivers 
          pathType: Prefix
          backend:
            service:
              name: backend
              port:
                number: 4000
        - path: /stats
          pathType: Prefix
          backend:
            service:
              name: backend
              port:
                number: 4000
  tls: []


resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

# This is to setup the liveness and readiness probes
# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 5
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes: {}
  # - name: cache-volume
  #   emptyDir: {}
  # - name: run-volume
  #   emptyDir: {}
  # - name: config-volume
  #   configMap:
  #     name: frontend

# Additional volumeMounts on the output Deployment definition.
volumeMounts: {}
  # - name: cache-volume
  #   mountPath: /var/cache/nginx
  # - name: run-volume
  #   mountPath: /var/run
  # - name: config-volume
  #   mountPath: /usr/share/nginx/html/config.js
  #   subPath: config.js

nodeSelector: {}

tolerations: []

affinity: {}